{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/EXTREME-GAMING/Desktop/65eme/microService/cultechFRONTh/CulTechConnectFrontOffice/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\n\nexport class Client {\n  /**\r\n   * Create an instance.\r\n   */\n  constructor(conf = {}) {\n    /**\r\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n     *\r\n     * Example:\r\n     * ```javascript\r\n     *        // Try only versions 1.1 and 1.0\r\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n     * ```\r\n     */\n    this.stompVersions = Versions.default;\n    /**\r\n     * Will retry if Stomp connection is not established in specified milliseconds.\r\n     * Default 0, which switches off automatic reconnection.\r\n     */\n\n    this.connectionTimeout = 0;\n    /**\r\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n     */\n\n    this.reconnectDelay = 5000;\n    /**\r\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n\n    this.heartbeatIncoming = 10000;\n    /**\r\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n\n    this.heartbeatOutgoing = 10000;\n    /**\r\n     * This switches on a non-standard behavior while sending WebSocket packets.\r\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n     * Only Java Spring brokers seem to support this mode.\r\n     *\r\n     * WebSockets, by itself, split large (text) packets,\r\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n     * Setting it for such a broker will cause large messages to fail.\r\n     *\r\n     * `false` by default.\r\n     *\r\n     * Binary frames are never split.\r\n     */\n\n    this.splitLargeFrames = false;\n    /**\r\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n     */\n\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\r\n     * Usually the\r\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n     * is automatically decided by type of the payload.\r\n     * Default is `false`, which should work with all compliant brokers.\r\n     *\r\n     * Set this flag to force binary frames.\r\n     */\n\n    this.forceBinaryWSFrames = false;\n    /**\r\n     * A bug in ReactNative chops a string on occurrence of a NULL.\r\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n     * This makes incoming WebSocket messages invalid STOMP packets.\r\n     * Setting this flag attempts to reverse the damage by appending a NULL.\r\n     * If the broker splits a large message into multiple WebSocket messages,\r\n     * this flag will cause data loss and abnormal termination of connection.\r\n     *\r\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n     */\n\n    this.appendMissingNULLonIncoming = false;\n    /**\r\n     * Browsers do not immediately close WebSockets when `.close` is issued.\r\n     * This may cause reconnection to take a significantly long time in case\r\n     *  of some types of failures.\r\n     * In case of incoming heartbeat failure, this experimental flag instructs\r\n     * the library to discard the socket immediately\r\n     * (even before it is actually closed).\r\n     */\n\n    this.discardWebsocketOnCommFailure = false;\n    /**\r\n     * Activation state.\r\n     *\r\n     * It will usually be ACTIVE or INACTIVE.\r\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n     */\n\n    this.state = ActivationState.INACTIVE; // No op callbacks\n\n    const noOp = () => {};\n\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp; // These parameters would typically get proper values before connect is called\n\n    this.connectHeaders = {};\n    this._disconnectHeaders = {}; // Apply configuration\n\n    this.configure(conf);\n  }\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\n\n\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\r\n   * Disconnection headers.\r\n   */\n\n\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\n\n\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\n\n\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\n\n\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\r\n   * Update configuration.\r\n   */\n\n\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect.\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\n\n\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n\n      this._changeState(ActivationState.ACTIVE);\n\n      this._connect();\n    }; // if it is deactivating, wait for it to complete before activating.\n\n\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n\n  _connect() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.beforeConnect();\n\n      if (_this._stompHandler) {\n        _this.debug('There is already a stompHandler, skipping the call to connect');\n\n        return;\n      }\n\n      if (!_this.active) {\n        _this.debug('Client has been marked inactive, will not attempt to connect');\n\n        return;\n      } // setup connection watcher\n\n\n      if (_this.connectionTimeout > 0) {\n        // clear first\n        if (_this._connectionWatcher) {\n          clearTimeout(_this._connectionWatcher);\n        }\n\n        _this._connectionWatcher = setTimeout(() => {\n          if (_this.connected) {\n            return;\n          } // Connection not established, close the underlying socket\n          // a reconnection will be attempted\n\n\n          _this.debug(`Connection not established in ${_this.connectionTimeout}ms, closing socket`);\n\n          _this.forceDisconnect();\n        }, _this.connectionTimeout);\n      }\n\n      _this.debug('Opening Web Socket...'); // Get the actual WebSocket (or a similar object)\n\n\n      const webSocket = _this._createWebSocket();\n\n      _this._stompHandler = new StompHandler(_this, webSocket, {\n        debug: _this.debug,\n        stompVersions: _this.stompVersions,\n        connectHeaders: _this.connectHeaders,\n        disconnectHeaders: _this._disconnectHeaders,\n        heartbeatIncoming: _this.heartbeatIncoming,\n        heartbeatOutgoing: _this.heartbeatOutgoing,\n        splitLargeFrames: _this.splitLargeFrames,\n        maxWebSocketChunkSize: _this.maxWebSocketChunkSize,\n        forceBinaryWSFrames: _this.forceBinaryWSFrames,\n        logRawCommunication: _this.logRawCommunication,\n        appendMissingNULLonIncoming: _this.appendMissingNULLonIncoming,\n        discardWebsocketOnCommFailure: _this.discardWebsocketOnCommFailure,\n        onConnect: frame => {\n          // Successfully connected, stop the connection watcher\n          if (_this._connectionWatcher) {\n            clearTimeout(_this._connectionWatcher);\n            _this._connectionWatcher = undefined;\n          }\n\n          if (!_this.active) {\n            _this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n\n            _this._disposeStompHandler();\n\n            return;\n          }\n\n          _this.onConnect(frame);\n        },\n        onDisconnect: frame => {\n          _this.onDisconnect(frame);\n        },\n        onStompError: frame => {\n          _this.onStompError(frame);\n        },\n        onWebSocketClose: evt => {\n          _this._stompHandler = undefined; // a new one will be created in case of a reconnect\n\n          if (_this.state === ActivationState.DEACTIVATING) {\n            // Mark deactivation complete\n            _this._changeState(ActivationState.INACTIVE);\n          } // The callback is called before attempting to reconnect, this would allow the client\n          // to be `deactivated` in the callback.\n\n\n          _this.onWebSocketClose(evt);\n\n          if (_this.active) {\n            _this._schedule_reconnect();\n          }\n        },\n        onWebSocketError: evt => {\n          _this.onWebSocketError(evt);\n        },\n        onUnhandledMessage: message => {\n          _this.onUnhandledMessage(message);\n        },\n        onUnhandledReceipt: frame => {\n          _this.onUnhandledReceipt(frame);\n        },\n        onUnhandledFrame: frame => {\n          _this.onUnhandledFrame(frame);\n        }\n      });\n\n      _this._stompHandler.start();\n    })();\n  }\n\n  _createWebSocket() {\n    let webSocket;\n\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n\n  _schedule_reconnect() {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\n\n\n  deactivate(options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const force = options.force || false;\n      const needToDispose = _this2.active;\n      let retPromise;\n\n      if (_this2.state === ActivationState.INACTIVE) {\n        _this2.debug(`Already INACTIVE, nothing more to do`);\n\n        return Promise.resolve();\n      }\n\n      _this2._changeState(ActivationState.DEACTIVATING); // Clear if a reconnection was scheduled\n\n\n      if (_this2._reconnector) {\n        clearTimeout(_this2._reconnector);\n        _this2._reconnector = undefined;\n      }\n\n      if (_this2._stompHandler && // @ts-ignore - if there is a _stompHandler, there is the webSocket\n      _this2.webSocket.readyState !== StompSocketState.CLOSED) {\n        const origOnWebSocketClose = _this2._stompHandler.onWebSocketClose; // we need to wait for the underlying websocket to close\n\n        retPromise = new Promise((resolve, reject) => {\n          // @ts-ignore - there is a _stompHandler\n          _this2._stompHandler.onWebSocketClose = evt => {\n            origOnWebSocketClose(evt);\n            resolve();\n          };\n        });\n      } else {\n        // indicate that auto reconnect loop should terminate\n        _this2._changeState(ActivationState.INACTIVE);\n\n        return Promise.resolve();\n      }\n\n      if (force) {\n        _this2._stompHandler?.discardWebsocket();\n      } else if (needToDispose) {\n        _this2._disposeStompHandler();\n      }\n\n      return retPromise;\n    })();\n  }\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\n\n\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\n\n\n  publish(params) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.publish(params);\n  }\n\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\n\n\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\n\n\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\n\n\n  unsubscribe(id, headers = {}) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\n\n\n  begin(transactionId) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\n\n\n  commit(transactionId) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.commit(transactionId);\n  }\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\n\n\n  abort(transactionId) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.abort(transactionId);\n  }\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n\n\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n\n\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection(); // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n\n\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/EXTREME-GAMING/Desktop/65eme/microService/cultechFRONTh/CulTechConnectFrontOffice/node_modules/@stomp/stompjs/esm6/client.js"],"names":["StompHandler","ActivationState","StompSocketState","Versions","Client","constructor","conf","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","state","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","onChangeState","connectHeaders","_disconnectHeaders","configure","webSocket","_stompHandler","_webSocket","disconnectHeaders","value","connected","connectedVersion","undefined","active","ACTIVE","_changeState","Object","assign","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","_createWebSocket","frame","_disposeStompHandler","evt","_schedule_reconnect","message","start","webSocketFactory","brokerURL","WebSocket","protocolVersions","Error","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","readyState","CLOSED","origOnWebSocketClose","reject","discardWebsocket","dispose","publish","params","_checkConnection","TypeError","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"mappings":"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CA;AACA;AACA;;;AACIlB,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKrB,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBqB,eAAnB;AACH;AACJ;;AACDG,EAAAA,oBAAoB,GAAG;AACnB;AACA,QAAI,KAAKxB,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmB+C,OAAnB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,SAAKC,gBAAL,GADY,CAEZ;;;AACA,SAAKlD,aAAL,CAAmBgD,OAAnB,CAA2BC,MAA3B;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,QAAI,CAAC,KAAK9C,SAAV,EAAqB;AACjB,YAAM,IAAI+C,SAAJ,CAAc,yCAAd,CAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACjC,SAAKJ,gBAAL,GADiC,CAEjC;;;AACA,SAAKlD,aAAL,CAAmBoD,eAAnB,CAAmCC,SAAnC,EAA8CC,QAA9C;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,WAAD,EAAcF,QAAd,EAAwBG,OAAO,GAAG,EAAlC,EAAsC;AAC3C,SAAKP,gBAAL,GAD2C,CAE3C;;;AACA,WAAO,KAAKlD,aAAL,CAAmBuD,SAAnB,CAA6BC,WAA7B,EAA0CF,QAA1C,EAAoDG,OAApD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,EAAD,EAAKF,OAAO,GAAG,EAAf,EAAmB;AAC1B,SAAKP,gBAAL,GAD0B,CAE1B;;;AACA,SAAKlD,aAAL,CAAmB0D,WAAnB,CAA+BC,EAA/B,EAAmCF,OAAnC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,KAAK,CAACC,aAAD,EAAgB;AACjB,SAAKX,gBAAL,GADiB,CAEjB;;;AACA,WAAO,KAAKlD,aAAL,CAAmB4D,KAAnB,CAAyBC,aAAzB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACD,aAAD,EAAgB;AAClB,SAAKX,gBAAL,GADkB,CAElB;;;AACA,SAAKlD,aAAL,CAAmB8D,MAAnB,CAA0BD,aAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACF,aAAD,EAAgB;AACjB,SAAKX,gBAAL,GADiB,CAEjB;;;AACA,SAAKlD,aAAL,CAAmB+D,KAAnB,CAAyBF,aAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,GAAG,CAACC,SAAD,EAAYC,cAAZ,EAA4BT,OAAO,GAAG,EAAtC,EAA0C;AACzC,SAAKP,gBAAL,GADyC,CAEzC;;;AACA,SAAKlD,aAAL,CAAmBgE,GAAnB,CAAuBC,SAAvB,EAAkCC,cAAlC,EAAkDT,OAAlD;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,IAAI,CAACF,SAAD,EAAYC,cAAZ,EAA4BT,OAAO,GAAG,EAAtC,EAA0C;AAC1C,SAAKP,gBAAL,GAD0C,CAE1C;;;AACA,SAAKlD,aAAL,CAAmBmE,IAAnB,CAAwBF,SAAxB,EAAmCC,cAAnC,EAAmDT,OAAnD;AACH;;AAvkBe","sourcesContent":["import { StompHandler } from './stomp-handler.js';\r\nimport { ActivationState, StompSocketState, } from './types.js';\r\nimport { Versions } from './versions.js';\r\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class Client {\r\n    /**\r\n     * Create an instance.\r\n     */\r\n    constructor(conf = {}) {\r\n        /**\r\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n         *\r\n         * Example:\r\n         * ```javascript\r\n         *        // Try only versions 1.1 and 1.0\r\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n         * ```\r\n         */\r\n        this.stompVersions = Versions.default;\r\n        /**\r\n         * Will retry if Stomp connection is not established in specified milliseconds.\r\n         * Default 0, which switches off automatic reconnection.\r\n         */\r\n        this.connectionTimeout = 0;\r\n        /**\r\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n         */\r\n        this.reconnectDelay = 5000;\r\n        /**\r\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n         */\r\n        this.heartbeatIncoming = 10000;\r\n        /**\r\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n         */\r\n        this.heartbeatOutgoing = 10000;\r\n        /**\r\n         * This switches on a non-standard behavior while sending WebSocket packets.\r\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n         * Only Java Spring brokers seem to support this mode.\r\n         *\r\n         * WebSockets, by itself, split large (text) packets,\r\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n         * Setting it for such a broker will cause large messages to fail.\r\n         *\r\n         * `false` by default.\r\n         *\r\n         * Binary frames are never split.\r\n         */\r\n        this.splitLargeFrames = false;\r\n        /**\r\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n         */\r\n        this.maxWebSocketChunkSize = 8 * 1024;\r\n        /**\r\n         * Usually the\r\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n         * is automatically decided by type of the payload.\r\n         * Default is `false`, which should work with all compliant brokers.\r\n         *\r\n         * Set this flag to force binary frames.\r\n         */\r\n        this.forceBinaryWSFrames = false;\r\n        /**\r\n         * A bug in ReactNative chops a string on occurrence of a NULL.\r\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n         * This makes incoming WebSocket messages invalid STOMP packets.\r\n         * Setting this flag attempts to reverse the damage by appending a NULL.\r\n         * If the broker splits a large message into multiple WebSocket messages,\r\n         * this flag will cause data loss and abnormal termination of connection.\r\n         *\r\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n         */\r\n        this.appendMissingNULLonIncoming = false;\r\n        /**\r\n         * Browsers do not immediately close WebSockets when `.close` is issued.\r\n         * This may cause reconnection to take a significantly long time in case\r\n         *  of some types of failures.\r\n         * In case of incoming heartbeat failure, this experimental flag instructs\r\n         * the library to discard the socket immediately\r\n         * (even before it is actually closed).\r\n         */\r\n        this.discardWebsocketOnCommFailure = false;\r\n        /**\r\n         * Activation state.\r\n         *\r\n         * It will usually be ACTIVE or INACTIVE.\r\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n         */\r\n        this.state = ActivationState.INACTIVE;\r\n        // No op callbacks\r\n        const noOp = () => { };\r\n        this.debug = noOp;\r\n        this.beforeConnect = noOp;\r\n        this.onConnect = noOp;\r\n        this.onDisconnect = noOp;\r\n        this.onUnhandledMessage = noOp;\r\n        this.onUnhandledReceipt = noOp;\r\n        this.onUnhandledFrame = noOp;\r\n        this.onStompError = noOp;\r\n        this.onWebSocketClose = noOp;\r\n        this.onWebSocketError = noOp;\r\n        this.logRawCommunication = false;\r\n        this.onChangeState = noOp;\r\n        // These parameters would typically get proper values before connect is called\r\n        this.connectHeaders = {};\r\n        this._disconnectHeaders = {};\r\n        // Apply configuration\r\n        this.configure(conf);\r\n    }\r\n    /**\r\n     * Underlying WebSocket instance, READONLY.\r\n     */\r\n    get webSocket() {\r\n        return this._stompHandler?._webSocket;\r\n    }\r\n    /**\r\n     * Disconnection headers.\r\n     */\r\n    get disconnectHeaders() {\r\n        return this._disconnectHeaders;\r\n    }\r\n    set disconnectHeaders(value) {\r\n        this._disconnectHeaders = value;\r\n        if (this._stompHandler) {\r\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\r\n        }\r\n    }\r\n    /**\r\n     * `true` if there is an active connection to STOMP Broker\r\n     */\r\n    get connected() {\r\n        return !!this._stompHandler && this._stompHandler.connected;\r\n    }\r\n    /**\r\n     * version of STOMP protocol negotiated with the server, READONLY\r\n     */\r\n    get connectedVersion() {\r\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\r\n    }\r\n    /**\r\n     * if the client is active (connected or going to reconnect)\r\n     */\r\n    get active() {\r\n        return this.state === ActivationState.ACTIVE;\r\n    }\r\n    _changeState(state) {\r\n        this.state = state;\r\n        this.onChangeState(state);\r\n    }\r\n    /**\r\n     * Update configuration.\r\n     */\r\n    configure(conf) {\r\n        // bulk assign all properties to this\r\n        Object.assign(this, conf);\r\n    }\r\n    /**\r\n     * Initiate the connection with the broker.\r\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n     * it will keep trying to reconnect.\r\n     *\r\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n     */\r\n    activate() {\r\n        const _activate = () => {\r\n            if (this.active) {\r\n                this.debug('Already ACTIVE, ignoring request to activate');\r\n                return;\r\n            }\r\n            this._changeState(ActivationState.ACTIVE);\r\n            this._connect();\r\n        };\r\n        // if it is deactivating, wait for it to complete before activating.\r\n        if (this.state === ActivationState.DEACTIVATING) {\r\n            this.debug('Waiting for deactivation to finish before activating');\r\n            this.deactivate().then(() => {\r\n                _activate();\r\n            });\r\n        }\r\n        else {\r\n            _activate();\r\n        }\r\n    }\r\n    async _connect() {\r\n        await this.beforeConnect();\r\n        if (this._stompHandler) {\r\n            this.debug('There is already a stompHandler, skipping the call to connect');\r\n            return;\r\n        }\r\n        if (!this.active) {\r\n            this.debug('Client has been marked inactive, will not attempt to connect');\r\n            return;\r\n        }\r\n        // setup connection watcher\r\n        if (this.connectionTimeout > 0) {\r\n            // clear first\r\n            if (this._connectionWatcher) {\r\n                clearTimeout(this._connectionWatcher);\r\n            }\r\n            this._connectionWatcher = setTimeout(() => {\r\n                if (this.connected) {\r\n                    return;\r\n                }\r\n                // Connection not established, close the underlying socket\r\n                // a reconnection will be attempted\r\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\r\n                this.forceDisconnect();\r\n            }, this.connectionTimeout);\r\n        }\r\n        this.debug('Opening Web Socket...');\r\n        // Get the actual WebSocket (or a similar object)\r\n        const webSocket = this._createWebSocket();\r\n        this._stompHandler = new StompHandler(this, webSocket, {\r\n            debug: this.debug,\r\n            stompVersions: this.stompVersions,\r\n            connectHeaders: this.connectHeaders,\r\n            disconnectHeaders: this._disconnectHeaders,\r\n            heartbeatIncoming: this.heartbeatIncoming,\r\n            heartbeatOutgoing: this.heartbeatOutgoing,\r\n            splitLargeFrames: this.splitLargeFrames,\r\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\r\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\r\n            logRawCommunication: this.logRawCommunication,\r\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\r\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\r\n            onConnect: frame => {\r\n                // Successfully connected, stop the connection watcher\r\n                if (this._connectionWatcher) {\r\n                    clearTimeout(this._connectionWatcher);\r\n                    this._connectionWatcher = undefined;\r\n                }\r\n                if (!this.active) {\r\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\r\n                    this._disposeStompHandler();\r\n                    return;\r\n                }\r\n                this.onConnect(frame);\r\n            },\r\n            onDisconnect: frame => {\r\n                this.onDisconnect(frame);\r\n            },\r\n            onStompError: frame => {\r\n                this.onStompError(frame);\r\n            },\r\n            onWebSocketClose: evt => {\r\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\r\n                if (this.state === ActivationState.DEACTIVATING) {\r\n                    // Mark deactivation complete\r\n                    this._changeState(ActivationState.INACTIVE);\r\n                }\r\n                // The callback is called before attempting to reconnect, this would allow the client\r\n                // to be `deactivated` in the callback.\r\n                this.onWebSocketClose(evt);\r\n                if (this.active) {\r\n                    this._schedule_reconnect();\r\n                }\r\n            },\r\n            onWebSocketError: evt => {\r\n                this.onWebSocketError(evt);\r\n            },\r\n            onUnhandledMessage: message => {\r\n                this.onUnhandledMessage(message);\r\n            },\r\n            onUnhandledReceipt: frame => {\r\n                this.onUnhandledReceipt(frame);\r\n            },\r\n            onUnhandledFrame: frame => {\r\n                this.onUnhandledFrame(frame);\r\n            },\r\n        });\r\n        this._stompHandler.start();\r\n    }\r\n    _createWebSocket() {\r\n        let webSocket;\r\n        if (this.webSocketFactory) {\r\n            webSocket = this.webSocketFactory();\r\n        }\r\n        else if (this.brokerURL) {\r\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\r\n        }\r\n        else {\r\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\r\n        }\r\n        webSocket.binaryType = 'arraybuffer';\r\n        return webSocket;\r\n    }\r\n    _schedule_reconnect() {\r\n        if (this.reconnectDelay > 0) {\r\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\r\n            this._reconnector = setTimeout(() => {\r\n                this._connect();\r\n            }, this.reconnectDelay);\r\n        }\r\n    }\r\n    /**\r\n     * Disconnect if connected and stop auto reconnect loop.\r\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n     *\r\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n     *\r\n     * It is not an error to invoke this method more than once.\r\n     * Each of those would resolve on completion of deactivation.\r\n     *\r\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n     *\r\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n     * In some cases, browsers take a long time in the Websocket shutdown\r\n     * if the underlying connection had gone stale.\r\n     * Using this mode can speed up.\r\n     * When this mode is used, the actual Websocket may linger for a while\r\n     * and the broker may not realize that the connection is no longer in use.\r\n     *\r\n     * It is possible to invoke this method initially without the `force` option\r\n     * and subsequently, say after a wait, with the `force` option.\r\n     */\r\n    async deactivate(options = {}) {\r\n        const force = options.force || false;\r\n        const needToDispose = this.active;\r\n        let retPromise;\r\n        if (this.state === ActivationState.INACTIVE) {\r\n            this.debug(`Already INACTIVE, nothing more to do`);\r\n            return Promise.resolve();\r\n        }\r\n        this._changeState(ActivationState.DEACTIVATING);\r\n        // Clear if a reconnection was scheduled\r\n        if (this._reconnector) {\r\n            clearTimeout(this._reconnector);\r\n            this._reconnector = undefined;\r\n        }\r\n        if (this._stompHandler &&\r\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\r\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\r\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\r\n            // we need to wait for the underlying websocket to close\r\n            retPromise = new Promise((resolve, reject) => {\r\n                // @ts-ignore - there is a _stompHandler\r\n                this._stompHandler.onWebSocketClose = evt => {\r\n                    origOnWebSocketClose(evt);\r\n                    resolve();\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            // indicate that auto reconnect loop should terminate\r\n            this._changeState(ActivationState.INACTIVE);\r\n            return Promise.resolve();\r\n        }\r\n        if (force) {\r\n            this._stompHandler?.discardWebsocket();\r\n        }\r\n        else if (needToDispose) {\r\n            this._disposeStompHandler();\r\n        }\r\n        return retPromise;\r\n    }\r\n    /**\r\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n     * After forcing disconnect, automatic reconnect will be attempted.\r\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n     */\r\n    forceDisconnect() {\r\n        if (this._stompHandler) {\r\n            this._stompHandler.forceDisconnect();\r\n        }\r\n    }\r\n    _disposeStompHandler() {\r\n        // Dispose STOMP Handler\r\n        if (this._stompHandler) {\r\n            this._stompHandler.dispose();\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n     * and naming of destinations.\r\n     *\r\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n     *\r\n     * `body` must be String.\r\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n     *\r\n     * To send a binary message body, use `binaryBody` parameter. It should be a\r\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n     * Sometimes brokers may not support binary frames out of the box.\r\n     * Please check your broker documentation.\r\n     *\r\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n     * For binary messages, `content-length` header is always added.\r\n     *\r\n     * Caution: The broker will, most likely, report an error and disconnect\r\n     * if the message body has NULL octet(s) and `content-length` header is missing.\r\n     *\r\n     * ```javascript\r\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n     *\r\n     *        // Only destination is mandatory parameter\r\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n     *\r\n     *        // Skip content-length header in the frame to the broker\r\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n     *\r\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n     *        // setting content-type header is not mandatory, however a good practice\r\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n     *                         headers: {'content-type': 'application/octet-stream'}});\r\n     * ```\r\n     */\r\n    publish(params) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.publish(params);\r\n    }\r\n    _checkConnection() {\r\n        if (!this.connected) {\r\n            throw new TypeError('There is no underlying STOMP connection');\r\n        }\r\n    }\r\n    /**\r\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n     * The value (say receipt-id) for this header needs to be unique for each use.\r\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n     *\r\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n     * The operation needs to be matched based on the value of the receipt-id.\r\n     *\r\n     * This method allows watching for a receipt and invoking the callback\r\n     *  when the corresponding receipt has been received.\r\n     *\r\n     * The actual {@link IFrame} will be passed as parameter to the callback.\r\n     *\r\n     * Example:\r\n     * ```javascript\r\n     *        // Subscribing with acknowledgement\r\n     *        let receiptId = randomText();\r\n     *\r\n     *        client.watchForReceipt(receiptId, function() {\r\n     *          // Will be called after server acknowledges\r\n     *        });\r\n     *\r\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n     *\r\n     *\r\n     *        // Publishing with acknowledgement\r\n     *        receiptId = randomText();\r\n     *\r\n     *        client.watchForReceipt(receiptId, function() {\r\n     *          // Will be called after server acknowledges\r\n     *        });\r\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n     * ```\r\n     */\r\n    watchForReceipt(receiptId, callback) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.watchForReceipt(receiptId, callback);\r\n    }\r\n    /**\r\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n     * received message with the {@link IMessage} as argument.\r\n     *\r\n     * Note: The library will generate a unique ID if there is none provided in the headers.\r\n     *       To use your own ID, pass it using the `headers` argument.\r\n     *\r\n     * ```javascript\r\n     *        callback = function(message) {\r\n     *        // called when the client receives a STOMP message from the server\r\n     *          if (message.body) {\r\n     *            alert(\"got message with body \" + message.body)\r\n     *          } else {\r\n     *            alert(\"got empty message\");\r\n     *          }\r\n     *        });\r\n     *\r\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n     *\r\n     *        // Explicit subscription id\r\n     *        var mySubId = 'my-subscription-id-001';\r\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n     * ```\r\n     */\r\n    subscribe(destination, callback, headers = {}) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        return this._stompHandler.subscribe(destination, callback, headers);\r\n    }\r\n    /**\r\n     * It is preferable to unsubscribe from a subscription by calling\r\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n     *\r\n     * ```javascript\r\n     *        var subscription = client.subscribe(destination, onmessage);\r\n     *        // ...\r\n     *        subscription.unsubscribe();\r\n     * ```\r\n     *\r\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n     */\r\n    unsubscribe(id, headers = {}) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.unsubscribe(id, headers);\r\n    }\r\n    /**\r\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n     * and [abort]{@link ITransaction#abort}.\r\n     *\r\n     * `transactionId` is optional, if not passed the library will generate it internally.\r\n     */\r\n    begin(transactionId) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        return this._stompHandler.begin(transactionId);\r\n    }\r\n    /**\r\n     * Commit a transaction.\r\n     *\r\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n     *\r\n     * ```javascript\r\n     *        var tx = client.begin(txId);\r\n     *        //...\r\n     *        tx.commit();\r\n     * ```\r\n     */\r\n    commit(transactionId) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.commit(transactionId);\r\n    }\r\n    /**\r\n     * Abort a transaction.\r\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n     *\r\n     * ```javascript\r\n     *        var tx = client.begin(txId);\r\n     *        //...\r\n     *        tx.abort();\r\n     * ```\r\n     */\r\n    abort(transactionId) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.abort(transactionId);\r\n    }\r\n    /**\r\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n     * on the {@link IMessage} handled by a subscription callback:\r\n     *\r\n     * ```javascript\r\n     *        var callback = function (message) {\r\n     *          // process the message\r\n     *          // acknowledge it\r\n     *          message.ack();\r\n     *        };\r\n     *        client.subscribe(destination, callback, {'ack': 'client'});\r\n     * ```\r\n     */\r\n    ack(messageId, subscriptionId, headers = {}) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.ack(messageId, subscriptionId, headers);\r\n    }\r\n    /**\r\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n     * on the {@link IMessage} handled by a subscription callback:\r\n     *\r\n     * ```javascript\r\n     *        var callback = function (message) {\r\n     *          // process the message\r\n     *          // an error occurs, nack it\r\n     *          message.nack();\r\n     *        };\r\n     *        client.subscribe(destination, callback, {'ack': 'client'});\r\n     * ```\r\n     */\r\n    nack(messageId, subscriptionId, headers = {}) {\r\n        this._checkConnection();\r\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n        this._stompHandler.nack(messageId, subscriptionId, headers);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}