{
    "sourceFile": "CulTechConnectFrontOffice-main/src/app/components/pages/quiz/quiz.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 108,
            "patches": [
                {
                    "date": 1697489820124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697489827005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   styleUrls: ['./quiz.component.scss']\n })\n export class QuizComponent implements OnInit {\n \n-  constructor() { }\n+  constructor() { private quizService: QuizService }\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n"
                },
                {
                    "date": 1697489838867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,12 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n export class QuizComponent implements OnInit {\n+  currentQuestionIndex: number = 0;\n+  userAnswers: Map<number, number> = new Map(); // Map of question index to selected answer index\n+  score: number = 0;\n+  questions: Question[] = [];\n \n   constructor() { private quizService: QuizService }\n \n   ngOnInit(): void {\n"
                },
                {
                    "date": 1697489863664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,6 +15,29 @@\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n+  loadQuestions(): void {\n+    this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      this.questions = data;\n+    });\n+  }\n \n+  selectAnswer(questionIndex: number, answerIndex: number): void {\n+    this.userAnswers.set(questionIndex, answerIndex);\n+  }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+    } else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+      this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+  }\n }\n"
                },
                {
                    "date": 1697489871880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n       // Implement navigation logic here\n     }\n   }\n \n-  calculateScore(): void {\n+  //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n   }\n }\n"
                },
                {
                    "date": 1697490155539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswers: Map<number, number> = new Map(); // Map of question index to selected answer index\n   score: number = 0;\n-  questions: Question[] = [];\n+  questions: question[] = [];\n \n   constructor() { private quizService: QuizService }\n \n   ngOnInit(): void {\n@@ -38,6 +38,6 @@\n \n   //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n-  }\n+//  }\n }\n"
                },
                {
                    "date": 1697490170185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\n-\n+import {question}\n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n"
                },
                {
                    "date": 1697490176578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\n-import {question}\n+import {question} from '../'\n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n"
                },
                {
                    "date": 1697490183079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\n-import {question} from '../'\n+import {question} from '../question'\n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n"
                },
                {
                    "date": 1697490189336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { Component, OnInit } from '@angular/core';\n-import {question} from '../question'\n+import {question} from '../question';\n+\n+\n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n"
                },
                {
                    "date": 1697490201912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question';\n \n-\n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n@@ -12,9 +11,9 @@\n   userAnswers: Map<number, number> = new Map(); // Map of question index to selected answer index\n   score: number = 0;\n   questions: question[] = [];\n \n-  constructor() { private quizService: QuizService }\n+  constructor() { private quizService: quizService }\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n"
                },
                {
                    "date": 1697490210525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question';\n+import {quizService}\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490217688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question';\n-import {quizService}\n+import {quizService} from '../'\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490223724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question';\n-import {quizService} from '../'\n+import {quizService} from '../services/services.component'\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490229209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n-import {question} from '../question';\n-import {quizService} from '../services/services.component'\n+import {question} from '../question/question.component';\n+import {quizService} from '../services/services.component';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490245268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   userAnswers: Map<number, number> = new Map(); // Map of question index to selected answer index\n   score: number = 0;\n   questions: question[] = [];\n \n-  constructor() { private quizService: quizService }\n+  constructor() {  }\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n"
                },
                {
                    "date": 1697490260375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,13 @@\n   styleUrls: ['./quiz.component.scss']\n })\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n-  userAnswers: Map<number, number> = new Map(); // Map of question index to selected answer index\n+  userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: question[] = [];\n \n-  constructor() {  }\n+  constructor(private quizService: quizService) {  }\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n"
                },
                {
                    "date": 1697490266856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n     } else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n+      \n       this.calculateScore();\n       // Implement navigation logic here\n     }\n   }\n"
                },
                {
                    "date": 1697490278735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n     } else {\n-      \n-      this.calculateScore();\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n       // Implement navigation logic here\n     }\n   }\n \n"
                },
                {
                    "date": 1697490308060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: Question[]) => {\n+    this.quizService.getQuestions().subscribe((data: question[]) => {\n       this.questions = data;\n     });\n   }\n \n"
                },
                {
                    "date": 1697490472204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question/question.component';\n-import {quizService} from '../services/services.component';\n+import {quizService} from '../services/services.component/';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490479418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question/question.component';\n-import {quizService} from '../services/services.component/';\n+import {quizService} from '../services/';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490497362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import { Component, OnInit } from '@angular/core';\n+import {question} from '../question/question.component';\n+import {quizService} from '../';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+export class QuizComponent implements OnInit {\n+  currentQuestionIndex: number = 0;\n+  userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: question[] = [];\n+\n+  constructor(private quizService: quizService) {  }\n+\n+  ngOnInit(): void {\n+    this.loadQuestions();\n+  }\n+  loadQuestions(): void {\n+    this.quizService.getQuestions().subscribe((data: question[]) => {\n+      this.questions = data;\n+    });\n+  }\n+\n+  selectAnswer(questionIndex: number, answerIndex: number): void {\n+    this.userAnswers.set(questionIndex, answerIndex);\n+  }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+    } else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+//  }\n+}\n"
                },
                {
                    "date": 1697490509158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,49 +42,4 @@\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n //  }\n }\n-import { Component, OnInit } from '@angular/core';\n-import {question} from '../question/question.component';\n-import {quizService} from '../services/';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-export class QuizComponent implements OnInit {\n-  currentQuestionIndex: number = 0;\n-  userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: question[] = [];\n-\n-  constructor(private quizService: quizService) {  }\n-\n-  ngOnInit(): void {\n-    this.loadQuestions();\n-  }\n-  loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: question[]) => {\n-      this.questions = data;\n-    });\n-  }\n-\n-  selectAnswer(questionIndex: number, answerIndex: number): void {\n-    this.userAnswers.set(questionIndex, answerIndex);\n-  }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-    } else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-  }\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-//  }\n-}\n"
                },
                {
                    "date": 1697490526920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question/question.component';\n-import {quizService} from '../';\n+import {quizService} from '../s';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490532317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question/question.component';\n-import {quizService} from '../s';\n+import {quizService} from '../services/';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490556712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Component, OnInit } from '@angular/core';\n import {question} from '../question/question.component';\n-import {quizService} from '../services/';\n+import {QuizService} from '../services/quiz.service';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n"
                },
                {
                    "date": 1697490564911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import { Component, OnInit } from '@angular/core';\n+import {question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+export class QuizComponent implements OnInit {\n+  currentQuestionIndex: number = 0;\n+  userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: question[] = [];\n+\n+  constructor(private quizService: QuizService) {  }\n+\n+  ngOnInit(): void {\n+    this.loadQuestions();\n+  }\n+  loadQuestions(): void {\n+    this.quizService.getQuestions().subscribe((data: question[]) => {\n+      this.questions = data;\n+    });\n+  }\n+\n+  selectAnswer(questionIndex: number, answerIndex: number): void {\n+    this.userAnswers.set(questionIndex, answerIndex);\n+  }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+    } else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+//  }\n+}\n"
                },
                {
                    "date": 1697490570161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\n-import {question} from '../question/question.component';\n+import {Question} from '../question/question.component';\n import {QuizService} from '../services/quiz.service';\n \n @Component({\n   selector: 'app-quiz',\n@@ -42,49 +42,4 @@\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n //  }\n }\n-import { Component, OnInit } from '@angular/core';\n-import {question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-export class QuizComponent implements OnInit {\n-  currentQuestionIndex: number = 0;\n-  userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: question[] = [];\n-\n-  constructor(private quizService: quizService) {  }\n-\n-  ngOnInit(): void {\n-    this.loadQuestions();\n-  }\n-  loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: question[]) => {\n-      this.questions = data;\n-    });\n-  }\n-\n-  selectAnswer(questionIndex: number, answerIndex: number): void {\n-    this.userAnswers.set(questionIndex, answerIndex);\n-  }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-    } else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-  }\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-//  }\n-}\n"
                },
                {
                    "date": 1697490576616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n-  questions: question[] = [];\n+  questions: Question[] = [];\n \n   constructor(private quizService: QuizService) {  }\n \n   ngOnInit(): void {\n"
                },
                {
                    "date": 1697490603644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: question[]) => {\n+    this.quizService.getQuestions().subscribe((data: Question[]) => {\n       this.questions = data;\n     });\n   }\n \n"
                },
                {
                    "date": 1697492806570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, OnInit } from '@angular/core';\n-import {Question} from '../question/question.component';\n+//import {Question} from '../question/question.component';\n import {QuizService} from '../services/quiz.service';\n \n @Component({\n   selector: 'app-quiz',\n"
                },
                {
                    "date": 1697492813215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,18 +10,18 @@\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n-  questions: Question[] = [];\n+ // questions: Question[] = [];\n \n   constructor(private quizService: QuizService) {  }\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n     this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      this.questions = data;\n+      //this.questions = data;\n     });\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n"
                },
                {
                    "date": 1697492825161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     this.userAnswers.set(questionIndex, answerIndex);\n   }\n \n   nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n     } else {\n       // The user has completed the quiz; calculate the score and navigate to results page\n      // this.calculateScore();\n"
                },
                {
                    "date": 1697492831565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n   }\n \n   nextQuestion(): void {\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-    } else {\n+     // this.currentQuestionIndex++;\n+    //} else {\n       // The user has completed the quiz; calculate the score and navigate to results page\n      // this.calculateScore();\n       // Implement navigation logic here\n     }\n"
                },
                {
                    "date": 1697492845894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,6 +40,5 @@\n \n   //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n-//  }\n-}\n+\n"
                },
                {
                    "date": 1697492853904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: Question[]) => {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     });\n   }\n \n"
                },
                {
                    "date": 1697492868190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n   }\n   loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n-    });\n+    }\n+    //);\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n     this.userAnswers.set(questionIndex, answerIndex);\n"
                },
                {
                    "date": 1697492874264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,11 @@\n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+    this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n-    }\n-    //);\n+    });\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n     this.userAnswers.set(questionIndex, answerIndex);\n"
                },
                {
                    "date": 1697492884969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n   loadQuestions(): void {\n-    this.quizService.getQuestions().subscribe((data: Question[]) => {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n-    });\n+    //});\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n     this.userAnswers.set(questionIndex, answerIndex);\n"
                },
                {
                    "date": 1697493052152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n+  questions: any[] = [];\n  // questions: Question[] = [];\n \n   constructor(private quizService: QuizService) {  }\n \n"
                },
                {
                    "date": 1697493062387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n+  \n   loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n"
                },
                {
                    "date": 1697493077049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,16 @@\n \n   ngOnInit(): void {\n     this.loadQuestions();\n   }\n-  \n+\n   loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+    });\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n     this.userAnswers.set(questionIndex, answerIndex);\n"
                },
                {
                    "date": 1697493105905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,10 @@\n     });\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n+\n+    \n     this.userAnswers.set(questionIndex, answerIndex);\n   }\n \n   nextQuestion(): void {\n"
                },
                {
                    "date": 1697493141614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,14 +29,21 @@\n     });\n   }\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++;\n+    }\n \n-    \n-    this.userAnswers.set(questionIndex, answerIndex);\n+   // this.userAnswers.set(questionIndex, answerIndex);\n   }\n \n   nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+    } else {\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n      // this.currentQuestionIndex++;\n     //} else {\n       // The user has completed the quiz; calculate the score and navigate to results page\n"
                },
                {
                    "date": 1697494404412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n   styleUrls: ['./quiz.component.scss']\n })\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n+  userAnswer: number;\n   userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n  // questions: Question[] = [];\n"
                },
                {
                    "date": 1697494435991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n })\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n-  userAnswers: Map<number, number> = new Map(); \n+ // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n  // questions: Question[] = [];\n \n@@ -32,8 +32,9 @@\n \n   selectAnswer(questionIndex: number, answerIndex: number): void {\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++;\n+      this.userAnswer = answerIndex; \n     }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n   }\n"
                },
                {
                    "date": 1697494680217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       this.questions = data;\n     });\n   }\n \n-  selectAnswer(questionIndex: number, answerIndex: number): void {\n+  selectAnswer( answerIndex: number): void {\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++;\n       this.userAnswer = answerIndex; \n     }\n"
                },
                {
                    "date": 1697494693164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++;\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n       this.userAnswer = answerIndex; \n     }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n"
                },
                {
                    "date": 1697494883766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,17 @@\n \n   selectAnswer( answerIndex: number): void {\n     // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n     //   this.score++;\n-      this.userAnswer = answerIndex; \n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.userAnswer = answerIndex; // Correct answer selected\n+    } else {\n+      this.userAnswer = answerIndex; // Wrong answer selected\n     }\n+    }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n-  }\n+ // }\n \n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n"
                },
                {
                    "date": 1697494891158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.userAnswer = answerIndex; // Correct answer selected\n     } else {\n       this.userAnswer = answerIndex; // Wrong answer selected\n+    } }\n     }\n-    }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n  // }\n \n"
                },
                {
                    "date": 1697494928070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,17 +36,22 @@\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.userAnswer = answerIndex; // Correct answer selected\n     } else {\n       this.userAnswer = answerIndex; // Wrong answer selected\n-    } }\n+    } \n     }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n  // }\n \n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n+      if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+        this.userAnswer = answerIndex; // Correct answer selected\n+      } else {\n+        this.userAnswer = answerIndex; // Wrong answer selected\n+      }\n     } else {\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n"
                },
                {
                    "date": 1697494936329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,13 +45,9 @@\n \n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n-      if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-        this.userAnswer = answerIndex; // Correct answer selected\n-      } else {\n-        this.userAnswer = answerIndex; // Wrong answer selected\n-      }\n+      this.userAnswer = undefined;\n     } else {\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n"
                },
                {
                    "date": 1697495280375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,14 @@\n \n   selectAnswer( answerIndex: number): void {\n     // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n     //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.userAnswer = answerIndex; // Correct answer selected\n-    } else {\n-      this.userAnswer = answerIndex; // Wrong answer selected\n-    } \n+      this.score++; // Increment the score for correct answers\n     }\n+    }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n  // }\n \n"
                },
                {
                    "date": 1697495793854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n+\n export class QuizComponent implements OnInit {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n  // userAnswers: Map<number, number> = new Map(); \n"
                },
                {
                    "date": 1697495800478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n   score: number = 0;\n   questions: any[] = [];\n  // questions: Question[] = [];\n \n-  constructor(private quizService: QuizService) {  }\n+constructor(private quizService: QuizService) {  }\n \n-  ngOnInit(): void {\n+ngOnInit(): void {\n     this.loadQuestions();\n   }\n \n   loadQuestions(): void {\n"
                },
                {
                    "date": 1697495808323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n ngOnInit(): void {\n     this.loadQuestions();\n   }\n \n-  loadQuestions(): void {\n+loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n"
                },
                {
                    "date": 1697496036461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   userAnswer: number;\n  // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n+  \n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n \n"
                },
                {
                    "date": 1697496049207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,15 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n \n-export class QuizComponent implements OnInit {\n+export class QuizComponent implements OnInit, , OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n  // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n-  \n+  timer: any;\n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n \n"
                },
                {
                    "date": 1697496057720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+ // questions: Question[] = [];\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+  }\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+    } else {\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697496098431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n constructor(private quizService: QuizService) {  }\n \n ngOnInit(): void {\n     this.loadQuestions();\n+    this.startTimer();\n   }\n \n loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n@@ -64,71 +65,4 @@\n   //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n \n-import { Component, OnInit } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, , OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n- // questions: Question[] = [];\n-\n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-  }\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-    } else {\n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-  }\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n"
                },
                {
                    "date": 1697496107694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,12 @@\n     this.loadQuestions();\n     this.startTimer();\n   }\n \n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n"
                },
                {
                    "date": 1697496138595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   selectAnswer( answerIndex: number): void {\n     // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n     //   this.score++;\n     this.userAnswer = answerIndex;\n-\n+    clearInterval(this.timer);\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n     }\n"
                },
                {
                    "date": 1697496147868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,11 @@\n   selectAnswer( answerIndex: number): void {\n     // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n     //   this.score++;\n     this.userAnswer = answerIndex;\n+    \n     clearInterval(this.timer);\n+\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n     }\n"
                },
                {
                    "date": 1697496188564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,13 @@\n   selectAnswer( answerIndex: number): void {\n     // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n     //   this.score++;\n     this.userAnswer = answerIndex;\n-    \n+\n     clearInterval(this.timer);\n \n+\n+    \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n     }\n"
                },
                {
                    "date": 1697496218010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,27 @@\n     this.userAnswer = answerIndex;\n \n     clearInterval(this.timer);\n \n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 2000);\n \n-    \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n     }\n \n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        // The timer logic\n+        // When the timer reaches 0 seconds, you can consider it as a timeout and automatically move to the next question.\n+        if (this.timer === 0) {\n+          this.nextQuestion();\n+        }\n+      }, 1000); // Update the timer every 1 second\n+    }\n+\n    // this.userAnswers.set(questionIndex, answerIndex);\n  // }\n \n   nextQuestion(): void {\n"
                },
                {
                    "date": 1697496235106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n     } else {\n+      clearInterval(this.timer);\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n      // this.currentQuestionIndex++;\n"
                },
                {
                    "date": 1697496395135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n  // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n   timer: any;\n+  timerCountdown: number = 10;\n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n \n"
                },
                {
                    "date": 1697496431890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,14 +55,15 @@\n     }\n \n     startTimer(): void {\n       this.timer = setInterval(() => {\n-        // The timer logic\n-        // When the timer reaches 0 seconds, you can consider it as a timeout and automatically move to the next question.\n-        if (this.timer === 0) {\n-          this.nextQuestion();\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n         }\n-      }, 1000); // Update the timer every 1 second\n+      }, 1000);\n     }\n \n    // this.userAnswers.set(questionIndex, answerIndex);\n  // }\n"
                },
                {
                    "date": 1697496493007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n     } else {\n       clearInterval(this.timer);\n+      this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n      // this.currentQuestionIndex++;\n"
                },
                {
                    "date": 1697496510002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n-    } else {\n+ \n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n"
                },
                {
                    "date": 1697496637237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n       //this.questions = data;\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n"
                },
                {
                    "date": 1697496676388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     clearInterval(this.timer);\n \n     setTimeout(() => {\n       this.nextQuestion();\n-    }, 2000);\n+    }, 1000);\n \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n"
                },
                {
                    "date": 1697496778474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     clearInterval(this.timer);\n \n     setTimeout(() => {\n       this.nextQuestion();\n-    }, 1000);\n+    }, 000);\n \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n"
                },
                {
                    "date": 1697496789511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,8 @@\n       //this.questions = data;\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n@@ -48,9 +46,9 @@\n     clearInterval(this.timer);\n \n     setTimeout(() => {\n       this.nextQuestion();\n-    }, 000);\n+    }, 1000);\n \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n@@ -73,9 +71,9 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n- \n+    } else {\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n"
                },
                {
                    "date": 1697496799642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n       //this.questions = data;\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n+      \n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n"
                },
                {
                    "date": 1697496839046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n       //this.questions = data;\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      \n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n@@ -60,8 +61,9 @@\n         if (this.timerCountdown > 0) {\n           this.timerCountdown--;\n         } else {\n           clearInterval(this.timer);\n+          this.nextQuestion();\n           // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n         }\n       }, 1000);\n     }\n"
                },
                {
                    "date": 1697496868533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+  timerCountdown: number = 10;\n+ // questions: Question[] = [];\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n+  }\n+\n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    clearInterval(this.timer);\n+\n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 1000);\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    }\n+\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        }\n+      }, 1000);\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+    } else {\n+      clearInterval(this.timer);\n+      \n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697496879120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,103 +76,8 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n     } else {\n       clearInterval(this.timer);\n-      \n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-  }\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n-  timerCountdown: number = 10;\n- // questions: Question[] = [];\n-\n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n-  }\n-\n-  ngOnDestroy(): void {\n-    clearInterval(this.timer); // Clear the timer when the component is destroyed\n-  }\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    clearInterval(this.timer);\n-\n-    setTimeout(() => {\n-      this.nextQuestion();\n-    }, 1000);\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    }\n-\n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-        }\n-      }, 1000);\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-    } else {\n-      clearInterval(this.timer);\n       this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n"
                },
                {
                    "date": 1697497094957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n-    } else {\n+ \n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n"
                },
                {
                    "date": 1697498634083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+  timerCountdown: number = 10;\n+  \n+ // questions: Question[] = [];\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n+  }\n+\n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    clearInterval(this.timer);\n+\n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 1000);\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    }\n+\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        }\n+      }, 1000);\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+      clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+  }\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697498693997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,103 +15,10 @@\n   score: number = 0;\n   questions: any[] = [];\n   timer: any;\n   timerCountdown: number = 10;\n-  \n- // questions: Question[] = [];\n+  allQuestionsAnswered: boolean = false;\n \n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n-  }\n-\n-  ngOnDestroy(): void {\n-    clearInterval(this.timer); // Clear the timer when the component is destroyed\n-  }\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    clearInterval(this.timer);\n-\n-    setTimeout(() => {\n-      this.nextQuestion();\n-    }, 1000);\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    }\n-\n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-        }\n-      }, 1000);\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-      clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-  }\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n-  timerCountdown: number = 10;\n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n \n@@ -148,8 +55,9 @@\n \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n+    \n     }\n \n     startTimer(): void {\n       this.timer = setInterval(() => {\n@@ -169,9 +77,8 @@\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n- \n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n       // Quiz completed; you can display results or navigate to a results page\n     }\n"
                },
                {
                    "date": 1697498718838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,12 @@\n \n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n-    \n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n     }\n+    }\n \n     startTimer(): void {\n       this.timer = setInterval(() => {\n         if (this.timerCountdown > 0) {\n@@ -79,8 +81,9 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n+      e\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n      // this.currentQuestionIndex++;\n"
                },
                {
                    "date": 1697498725749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,11 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n-      e\n+      else {\n+        \n+      }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n      // this.currentQuestionIndex++;\n"
                },
                {
                    "date": 1697498735159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n       else {\n-        \n+        this.allQuestionsAnswered = true; \n       }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n"
                },
                {
                    "date": 1697498743233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n+      \n       else {\n         this.allQuestionsAnswered = true; \n       }\n       // Quiz completed; you can display results or navigate to a results page\n"
                },
                {
                    "date": 1697498750826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n-      \n+    }\n       else {\n         this.allQuestionsAnswered = true; \n       }\n       // Quiz completed; you can display results or navigate to a results page\n@@ -94,10 +94,10 @@\n       // The user has completed the quiz; calculate the score and navigate to results page\n      // this.calculateScore();\n       // Implement navigation logic here\n     }\n-  }\n \n+\n   //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n \n"
                },
                {
                    "date": 1697498930755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n   questions: any[] = [];\n   timer: any;\n   timerCountdown: number = 10;\n   allQuestionsAnswered: boolean = false;\n-\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n \n"
                },
                {
                    "date": 1697499500476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n   questions: any[] = [];\n   timer: any;\n   timerCountdown: number = 10;\n   allQuestionsAnswered: boolean = false;\n-  allQuestionsAnswered: boolean = false;\n   showScore: boolean = false;\n  // questions: Question[] = [];\n \n constructor(private quizService: QuizService) {  }\n@@ -49,12 +48,10 @@\n     this.userAnswer = answerIndex;\n \n     clearInterval(this.timer);\n \n-    setTimeout(() => {\n-      this.nextQuestion();\n-    }, 1000);\n \n+\n     if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n       this.score++; // Increment the score for correct answers\n     }\n     if (this.currentQuestionIndex === this.questions.length - 1) {\n"
                },
                {
                    "date": 1697499557364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+  timerCountdown: number = 10;\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n+ // questions: Question[] = [];\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n+  }\n+\n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    clearInterval(this.timer);\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n+    }\n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 1000);\n+    }\n+\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        }\n+      }, 1000);\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+      clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      this.startTimer();\n+    }\n+      else {\n+        this.allQuestionsAnswered = true; \n+      }\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697499572744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n       this.startTimer();\n     }\n       else {\n         this.allQuestionsAnswered = true; \n+        \n       }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n@@ -100,105 +101,4 @@\n   //calculateScore(): void {\n     // Calculate the score based on user answers and update the 'score' variable\n     // You can add your scoring logic here\n \n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n-  timerCountdown: number = 10;\n-  allQuestionsAnswered: boolean = false;\n-  showScore: boolean = false;\n- // questions: Question[] = [];\n-\n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n-  }\n-\n-  ngOnDestroy(): void {\n-    clearInterval(this.timer); // Clear the timer when the component is destroyed\n-  }\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    clearInterval(this.timer);\n-\n-\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    if (this.currentQuestionIndex === this.questions.length - 1) {\n-      this.allQuestionsAnswered = true;\n-    }\n-    }\n-\n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-        }\n-      }, 1000);\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-      clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-    }\n-      else {\n-        this.allQuestionsAnswered = true; \n-      }\n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n"
                },
                {
                    "date": 1697501433711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,10 @@\n   timerCountdown: number = 10;\n   allQuestionsAnswered: boolean = false;\n   showScore: boolean = false;\n  // questions: Question[] = [];\n-\n+ quizStarted: boolean = false;\n+ \n constructor(private quizService: QuizService) {  }\n \n ngOnInit(): void {\n     this.loadQuestions();\n@@ -84,9 +85,9 @@\n       this.startTimer();\n     }\n       else {\n         this.allQuestionsAnswered = true; \n-        \n+        this.showScore = true;\n       }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n    // if (this.currentQuestionIndex < this.questions.length - 1) {\n"
                },
                {
                    "date": 1697501447189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   allQuestionsAnswered: boolean = false;\n   showScore: boolean = false;\n  // questions: Question[] = [];\n  quizStarted: boolean = false;\n- \n+\n constructor(private quizService: QuizService) {  }\n \n ngOnInit(): void {\n     this.loadQuestions();\n@@ -31,8 +31,12 @@\n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n+  startQuiz(): void {\n+    // Set quizStarted to true to show the quiz questions\n+    this.quizStarted = true;\n+  }\n loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n"
                },
                {
                    "date": 1697501659392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,10 @@\n   startQuiz(): void {\n     // Set quizStarted to true to show the quiz questions\n     this.quizStarted = true;\n   }\n+\n+  \n loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n"
                },
                {
                    "date": 1697501771265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,17 @@\n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n+\n   startQuiz(): void {\n     // Set quizStarted to true to show the quiz questions\n     this.quizStarted = true;\n+\n+    \n   }\n \n-  \n+\n loadQuestions(): void {\n     //this.quizService.getQuestions().subscribe((data: Question[]) => {\n       //this.questions = data;\n     //});\n"
                },
                {
                    "date": 1697501781980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,11 @@\n   startQuiz(): void {\n     // Set quizStarted to true to show the quiz questions\n     this.quizStarted = true;\n \n-    \n+    this.loadQuestions();\n+    this.startTimer();\n+\n   }\n \n \n loadQuestions(): void {\n"
                },
                {
                    "date": 1697501806497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n       this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n+     // this.startTimer(); \n     });\n   }\n \n   selectAnswer( answerIndex: number): void {\n"
                },
                {
                    "date": 1697501824454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+  timerCountdown: number = 10;\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n+ // questions: Question[] = [];\n+ quizStarted: boolean = false;\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n+  }\n+\n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n+\n+  startQuiz(): void {\n+    // Set quizStarted to true to show the quiz questions\n+    this.quizStarted = true;\n+\n+    this.loadQuestions();\n+    //this.startTimer();\n+\n+  }\n+\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+     // this.startTimer(); \n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    clearInterval(this.timer);\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n+    }\n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 1000);\n+    }\n+\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        }\n+      }, 1000);\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+      clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      this.startTimer();\n+    }\n+      else {\n+        this.allQuestionsAnswered = true; \n+        this.showScore = true;\n+      }\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697501838649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: ['./quiz.component.scss']\n+})\n+\n+export class QuizComponent implements OnInit, OnDestroy {\n+  currentQuestionIndex: number = 0;\n+  userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n+  score: number = 0;\n+  questions: any[] = [];\n+  timer: any;\n+  timerCountdown: number = 10;\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n+ // questions: Question[] = [];\n+ quizStarted: boolean = false;\n+\n+constructor(private quizService: QuizService) {  }\n+\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n+  }\n+\n+  ngOnDestroy(): void {\n+    clearInterval(this.timer); // Clear the timer when the component is destroyed\n+  }\n+\n+\n+  startQuiz(): void {\n+    // Set quizStarted to true to show the quiz questions\n+    this.quizStarted = true;\n+\n+    this.loadQuestions();\n+    this.startTimer();\n+\n+  }\n+\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n+    this.quizService.getQuestions().subscribe((data: any[]) => {\n+      this.questions = data;\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n+    });\n+  }\n+\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n+    this.userAnswer = answerIndex;\n+\n+    clearInterval(this.timer);\n+\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n+    }\n+    setTimeout(() => {\n+      this.nextQuestion();\n+    }, 1000);\n+    }\n+\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        }\n+      }, 1000);\n+    }\n+\n+   // this.userAnswers.set(questionIndex, answerIndex);\n+ // }\n+\n+  nextQuestion(): void {\n+    if (this.currentQuestionIndex < this.questions.length - 1) {\n+      this.currentQuestionIndex++;\n+      this.userAnswer = undefined;\n+      clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      this.startTimer();\n+    }\n+      else {\n+        this.allQuestionsAnswered = true; \n+        this.showScore = true;\n+      }\n+      // Quiz completed; you can display results or navigate to a results page\n+    }\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+\n+\n+  //calculateScore(): void {\n+    // Calculate the score based on user answers and update the 'score' variable\n+    // You can add your scoring logic here\n+\n"
                },
                {
                    "date": 1697501950368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,240 +109,4 @@\n       // Implement navigation logic here\n     }\n \n \n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n-  timerCountdown: number = 10;\n-  allQuestionsAnswered: boolean = false;\n-  showScore: boolean = false;\n- // questions: Question[] = [];\n- quizStarted: boolean = false;\n-\n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n-  }\n-\n-  ngOnDestroy(): void {\n-    clearInterval(this.timer); // Clear the timer when the component is destroyed\n-  }\n-\n-\n-  startQuiz(): void {\n-    // Set quizStarted to true to show the quiz questions\n-    this.quizStarted = true;\n-\n-    this.loadQuestions();\n-    //this.startTimer();\n-\n-  }\n-\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-     // this.startTimer(); \n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    clearInterval(this.timer);\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    if (this.currentQuestionIndex === this.questions.length - 1) {\n-      this.allQuestionsAnswered = true;\n-    }\n-    setTimeout(() => {\n-      this.nextQuestion();\n-    }, 1000);\n-    }\n-\n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-        }\n-      }, 1000);\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-      clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-      this.startTimer();\n-    }\n-      else {\n-        this.allQuestionsAnswered = true; \n-        this.showScore = true;\n-      }\n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n-})\n-\n-export class QuizComponent implements OnInit, OnDestroy {\n-  currentQuestionIndex: number = 0;\n-  userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n-  score: number = 0;\n-  questions: any[] = [];\n-  timer: any;\n-  timerCountdown: number = 10;\n-  allQuestionsAnswered: boolean = false;\n-  showScore: boolean = false;\n- // questions: Question[] = [];\n- quizStarted: boolean = false;\n-\n-constructor(private quizService: QuizService) {  }\n-\n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n-  }\n-\n-  ngOnDestroy(): void {\n-    clearInterval(this.timer); // Clear the timer when the component is destroyed\n-  }\n-\n-\n-  startQuiz(): void {\n-    // Set quizStarted to true to show the quiz questions\n-    this.quizStarted = true;\n-\n-    this.loadQuestions();\n-    this.startTimer();\n-\n-  }\n-\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n-    this.quizService.getQuestions().subscribe((data: any[]) => {\n-      this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-     // this.startTimer(); \n-    });\n-  }\n-\n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n-    this.userAnswer = answerIndex;\n-\n-    clearInterval(this.timer);\n-\n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    if (this.currentQuestionIndex === this.questions.length - 1) {\n-      this.allQuestionsAnswered = true;\n-    }\n-    setTimeout(() => {\n-      this.nextQuestion();\n-    }, 1000);\n-    }\n-\n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-        }\n-      }, 1000);\n-    }\n-\n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n-  nextQuestion(): void {\n-    if (this.currentQuestionIndex < this.questions.length - 1) {\n-      this.currentQuestionIndex++;\n-      this.userAnswer = undefined;\n-      clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-      this.startTimer();\n-    }\n-      else {\n-        this.allQuestionsAnswered = true; \n-        this.showScore = true;\n-      }\n-      // Quiz completed; you can display results or navigate to a results page\n-    }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-\n-\n-  //calculateScore(): void {\n-    // Calculate the score based on user answers and update the 'score' variable\n-    // You can add your scoring logic here\n-\n"
                },
                {
                    "date": 1697501967838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n           this.timerCountdown--;\n         } else {\n           clearInterval(this.timer);\n           this.nextQuestion();\n-          // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+        \n         }\n       }, 1000);\n     }\n \n"
                },
                {
                    "date": 1697501977834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,16 +78,12 @@\n           this.timerCountdown--;\n         } else {\n           clearInterval(this.timer);\n           this.nextQuestion();\n-        \n         }\n       }, 1000);\n     }\n \n-   // this.userAnswers.set(questionIndex, answerIndex);\n- // }\n-\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n"
                },
                {
                    "date": 1697502104080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,74 @@\n-import { Component, OnInit, OnDestroy  } from '@angular/core';\n-//import {Question} from '../question/question.component';\n-import {QuizService} from '../services/quiz.service';\n+import { Component, OnInit, OnDestroy } from '@angular/core';\n+import { QuizService } from '../services/quiz.service;\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n-  styleUrls: ['./quiz.component.scss']\n+  styleUrls: './quiz.component.scss',\n })\n-\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n+  quizStarted: boolean = false;\n   timer: any;\n   timerCountdown: number = 10;\n-  allQuestionsAnswered: boolean = false;\n-  showScore: boolean = false;\n- // questions: Question[] = [];\n- quizStarted: boolean = false;\n \n-constructor(private quizService: QuizService) {  }\n+  constructor(private quizService: QuizService) {}\n \n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n+  ngOnInit(): void {\n+    // Initialize the timerCountdown when the component loads\n+    this.timerCountdown = 10;\n   }\n \n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n-\n-  startQuiz(): void {\n-    // Set quizStarted to true to show the quiz questions\n-    this.quizStarted = true;\n-\n-    this.loadQuestions();\n-    this.startTimer();\n-\n-  }\n-\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n+  loadQuestions(): void {\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n+      this.startTimer();\n     });\n   }\n \n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n+  selectAnswer(answerIndex: number): void {\n     this.userAnswer = answerIndex;\n \n+    // Clear the timer and handle next question logic\n     clearInterval(this.timer);\n \n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    if (this.currentQuestionIndex === this.questions.length - 1) {\n-      this.allQuestionsAnswered = true;\n-    }\n     setTimeout(() => {\n       this.nextQuestion();\n     }, 1000);\n-    }\n \n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-        }\n-      }, 1000);\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n     }\n+  }\n \n+  startTimer(): void {\n+    this.timer = setInterval(() => {\n+      if (this.timerCountdown > 0) {\n+        this.timerCountdown--; // Decrement by 1 second\n+      } else {\n+        clearInterval(this.timer);\n+        this.nextQuestion();\n+        // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+      }\n+    }, 1000); // Use 1000 milliseconds (1 second) interval\n+  }\n+\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n+      this.timerCountdown = 10; // Reset the timer countdown for the next question\n+      this.startTimer(); // Start the timer for the next question\n+    } else {\n       clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-      this.startTimer();\n-    }\n-      else {\n-        this.allQuestionsAnswered = true; \n-        this.showScore = true;\n-      }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-\n-\n+  }\n+}\n"
                },
                {
                    "date": 1697502110865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,108 @@\n-import { Component, OnInit, OnDestroy } from '@angular/core';\n-import { QuizService } from '../services/quiz.service;\n+import { Component, OnInit, OnDestroy  } from '@angular/core';\n+//import {Question} from '../question/question.component';\n+import {QuizService} from '../services/quiz.service';\n \n @Component({\n   selector: 'app-quiz',\n   templateUrl: './quiz.component.html',\n-  styleUrls: './quiz.component.scss',\n+  styleUrls: ['./quiz.component.scss']\n })\n+\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n-  quizStarted: boolean = false;\n   timer: any;\n   timerCountdown: number = 10;\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n+ // questions: Question[] = [];\n+ quizStarted: boolean = false;\n \n-  constructor(private quizService: QuizService) {}\n+constructor(private quizService: QuizService) {  }\n \n-  ngOnInit(): void {\n-    // Initialize the timerCountdown when the component loads\n-    this.timerCountdown = 10;\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n   }\n \n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n-  loadQuestions(): void {\n+\n+  startQuiz(): void {\n+    // Set quizStarted to true to show the quiz questions\n+    this.quizStarted = true;\n+\n+    this.loadQuestions();\n+    this.startTimer();\n+\n+  }\n+\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      this.startTimer();\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      this.startTimer(); \n     });\n   }\n \n-  selectAnswer(answerIndex: number): void {\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n     this.userAnswer = answerIndex;\n \n-    // Clear the timer and handle next question logic\n     clearInterval(this.timer);\n \n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n+    }\n     setTimeout(() => {\n       this.nextQuestion();\n     }, 1000);\n+    }\n \n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+        }\n+      }, 1000);\n     }\n-  }\n \n-  startTimer(): void {\n-    this.timer = setInterval(() => {\n-      if (this.timerCountdown > 0) {\n-        this.timerCountdown--; // Decrement by 1 second\n-      } else {\n-        clearInterval(this.timer);\n-        this.nextQuestion();\n-        // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-      }\n-    }, 1000); // Use 1000 milliseconds (1 second) interval\n-  }\n-\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n-      this.timerCountdown = 10; // Reset the timer countdown for the next question\n-      this.startTimer(); // Start the timer for the next question\n-    } else {\n       clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      this.startTimer();\n+    }\n+      else {\n+        this.allQuestionsAnswered = true; \n+        this.showScore = true;\n+      }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n-  }\n-}\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+\n+\n"
                },
                {
                    "date": 1697502128124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,102 +7,78 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n \n+import { Component, OnInit, OnDestroy } from '@angular/core';\n+import { QuizService } from '../services/quiz.service;\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: './quiz.component.scss',\n+})\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n- // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n+  quizStarted: boolean = false;\n   timer: any;\n   timerCountdown: number = 10;\n-  allQuestionsAnswered: boolean = false;\n-  showScore: boolean = false;\n- // questions: Question[] = [];\n- quizStarted: boolean = false;\n \n-constructor(private quizService: QuizService) {  }\n+  constructor(private quizService: QuizService) {}\n \n-ngOnInit(): void {\n-    this.loadQuestions();\n-    this.startTimer();\n+  ngOnInit(): void {\n+    // Initialize the timerCountdown when the component loads\n+    this.timerCountdown = 10;\n   }\n \n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n-\n-  startQuiz(): void {\n-    // Set quizStarted to true to show the quiz questions\n-    this.quizStarted = true;\n-\n-    this.loadQuestions();\n-    this.startTimer();\n-\n-  }\n-\n-\n-loadQuestions(): void {\n-    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n-      //this.questions = data;\n-    //});\n+  loadQuestions(): void {\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n-      this.startTimer(); \n+      this.startTimer();\n     });\n   }\n \n-  selectAnswer( answerIndex: number): void {\n-    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-    //   this.score++;\n+  selectAnswer(answerIndex: number): void {\n     this.userAnswer = answerIndex;\n \n+    // Clear the timer and handle next question logic\n     clearInterval(this.timer);\n \n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n-    }\n-    if (this.currentQuestionIndex === this.questions.length - 1) {\n-      this.allQuestionsAnswered = true;\n-    }\n     setTimeout(() => {\n       this.nextQuestion();\n     }, 1000);\n-    }\n \n-    startTimer(): void {\n-      this.timer = setInterval(() => {\n-        if (this.timerCountdown > 0) {\n-          this.timerCountdown--;\n-        } else {\n-          clearInterval(this.timer);\n-          this.nextQuestion();\n-        }\n-      }, 1000);\n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n     }\n+  }\n \n+  startTimer(): void {\n+    this.timer = setInterval(() => {\n+      if (this.timerCountdown > 0) {\n+        this.timerCountdown--; // Decrement by 1 second\n+      } else {\n+        clearInterval(this.timer);\n+        this.nextQuestion();\n+        // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n+      }\n+    }, 1000); // Use 1000 milliseconds (1 second) interval\n+  }\n+\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n+      this.timerCountdown = 10; // Reset the timer countdown for the next question\n+      this.startTimer(); // Start the timer for the next question\n+    } else {\n       clearInterval(this.timer);\n-      this.timerCountdown = 10;\n-      this.startTimer();\n-    }\n-      else {\n-        this.allQuestionsAnswered = true; \n-        this.showScore = true;\n-      }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n-   // if (this.currentQuestionIndex < this.questions.length - 1) {\n-     // this.currentQuestionIndex++;\n-    //} else {\n-      // The user has completed the quiz; calculate the score and navigate to results page\n-     // this.calculateScore();\n-      // Implement navigation logic here\n-    }\n-\n-\n+  }\n+}\n"
                },
                {
                    "date": 1697502139479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,8 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n \n-import { Component, OnInit, OnDestroy } from '@angular/core';\n-import { QuizService } from '../services/quiz.service;\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: './quiz.component.scss',\n-})\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n   score: number = 0;\n"
                },
                {
                    "date": 1697502161169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,16 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n \n+import { Component, OnInit, OnDestroy } from '@angular/core';\n+import { QuizService } from '../services/quiz.service;\n+\n+@Component({\n+  selector: 'app-quiz',\n+  templateUrl: './quiz.component.html',\n+  styleUrls: './quiz.component.scss',\n+})\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n   score: number = 0;\n"
                },
                {
                    "date": 1697502207251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,78 +7,102 @@\n   templateUrl: './quiz.component.html',\n   styleUrls: ['./quiz.component.scss']\n })\n \n-import { Component, OnInit, OnDestroy } from '@angular/core';\n-import { QuizService } from '../services/quiz.service;\n-\n-@Component({\n-  selector: 'app-quiz',\n-  templateUrl: './quiz.component.html',\n-  styleUrls: './quiz.component.scss',\n-})\n export class QuizComponent implements OnInit, OnDestroy {\n   currentQuestionIndex: number = 0;\n   userAnswer: number;\n+ // userAnswers: Map<number, number> = new Map(); \n   score: number = 0;\n   questions: any[] = [];\n-  quizStarted: boolean = false;\n   timer: any;\n   timerCountdown: number = 10;\n+  allQuestionsAnswered: boolean = false;\n+  showScore: boolean = false;\n+ // questions: Question[] = [];\n+ quizStarted: boolean = false;\n \n-  constructor(private quizService: QuizService) {}\n+constructor(private quizService: QuizService) {  }\n \n-  ngOnInit(): void {\n-    // Initialize the timerCountdown when the component loads\n-    this.timerCountdown = 10;\n+ngOnInit(): void {\n+    this.loadQuestions();\n+    this.startTimer();\n   }\n \n   ngOnDestroy(): void {\n     clearInterval(this.timer); // Clear the timer when the component is destroyed\n   }\n \n-  loadQuestions(): void {\n+\n+  startQuiz(): void {\n+    // Set quizStarted to true to show the quiz questions\n+    this.quizStarted = true;\n+\n+    this.loadQuestions();\n+    this.startTimer();\n+\n+  }\n+\n+\n+loadQuestions(): void {\n+    //this.quizService.getQuestions().subscribe((data: Question[]) => {\n+      //this.questions = data;\n+    //});\n     this.quizService.getQuestions().subscribe((data: any[]) => {\n       this.questions = data;\n-      this.startTimer();\n+      this.timerCountdown = 10; // Reset the timer countdown when loading a new question\n+      //this.startTimer(); \n     });\n   }\n \n-  selectAnswer(answerIndex: number): void {\n+  selectAnswer( answerIndex: number): void {\n+    // if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+    //   this.score++;\n     this.userAnswer = answerIndex;\n \n-    // Clear the timer and handle next question logic\n     clearInterval(this.timer);\n \n+    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n+      this.score++; // Increment the score for correct answers\n+    }\n+    if (this.currentQuestionIndex === this.questions.length - 1) {\n+      this.allQuestionsAnswered = true;\n+    }\n     setTimeout(() => {\n       this.nextQuestion();\n     }, 1000);\n+    }\n \n-    if (answerIndex === this.questions[this.currentQuestionIndex].correctAnswerIndex) {\n-      this.score++; // Increment the score for correct answers\n+    startTimer(): void {\n+      this.timer = setInterval(() => {\n+        if (this.timerCountdown > 0) {\n+          this.timerCountdown--;\n+        } else {\n+          clearInterval(this.timer);\n+          this.nextQuestion();\n+        }\n+      }, 1000);\n     }\n-  }\n \n-  startTimer(): void {\n-    this.timer = setInterval(() => {\n-      if (this.timerCountdown > 0) {\n-        this.timerCountdown--; // Decrement by 1 second\n-      } else {\n-        clearInterval(this.timer);\n-        this.nextQuestion();\n-        // Handle the case when the timer reaches 0 seconds (e.g., move to the next question)\n-      }\n-    }, 1000); // Use 1000 milliseconds (1 second) interval\n-  }\n-\n   nextQuestion(): void {\n     if (this.currentQuestionIndex < this.questions.length - 1) {\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n-      this.timerCountdown = 10; // Reset the timer countdown for the next question\n-      this.startTimer(); // Start the timer for the next question\n-    } else {\n       clearInterval(this.timer);\n+      this.timerCountdown = 10;\n+      this.startTimer();\n+    }\n+      else {\n+        this.allQuestionsAnswered = true; \n+        this.showScore = true;\n+      }\n       // Quiz completed; you can display results or navigate to a results page\n     }\n-  }\n-}\n+   // if (this.currentQuestionIndex < this.questions.length - 1) {\n+     // this.currentQuestionIndex++;\n+    //} else {\n+      // The user has completed the quiz; calculate the score and navigate to results page\n+     // this.calculateScore();\n+      // Implement navigation logic here\n+    }\n+\n+\n"
                },
                {
                    "date": 1697502251421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n       this.currentQuestionIndex++;\n       this.userAnswer = undefined;\n       clearInterval(this.timer);\n       this.timerCountdown = 10;\n-      this.startTimer();\n+     // this.startTimer();\n     }\n       else {\n         this.allQuestionsAnswered = true; \n         this.showScore = true;\n"
                }
            ],
            "date": 1697489820124,
            "name": "Commit-0",
            "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss']\n})\nexport class QuizComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n}\n"
        }
    ]
}